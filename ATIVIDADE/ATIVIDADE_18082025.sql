CREATE TABLE ITENS_PEDIDOS( 
ID_ITENS SERIAL PRIMARY KEY, 
ID_PEDIDOS INT NOT NULL, 
ID_PRODUTOS INT NOT NULL, 
QUANTIDADE INT NOT NULL, 
PRECO_UNIT REAL NOT NULL, 
SUBTOTAL REAL NOT NULL, 
CONSTRAINT FK_PEDIDOS FOREIGN KEY ID_PEDIDOS REFERENCES PEDIDOS (ID_PEDIDOS),
CONSTRAINT FK_PRODUTOS FOREIGN KEY ID_PRODUTO REFERENCES PRODUTOS (ID_PRODUTO)
);
INSERT INTO ITENS_PEDIDOS (ID_PEDIDOS, ID_PRODUTOS, QUANTIDADE, PRECO_UNIT, SUBTOTAL)VALUES
(1, 1, 10, 2.50, 25.00),
(1, 2, 5, 3.00, 15.00),
(2, 3, 2, 15.00, 30.00),
(2, 4, 1, 120.00, 120.00),
(2, 5, 1, 80.00, 80.00);

CREATE TABLE PRODUTOS( 
ID_PRODUTOS SERIAL PRIMARY KEY, 
NOME VARCHAR ( 100) NOT NULL, 
PRECO REAL NOT NULL ,WHERE  (PRECO IN (PRECO > 0)), 
ESTOQUE REAL NOT NULL DEFAULT 0 WHERE (ESTOQUE IN(ESTOQUE > 0 && ESTOQUE == 0 )), 
ATICO INT NOT NULL DEFAULT 0
);
INSERT INTO PRODUTOS (NOME, PRECO, ESTOQUE, ATICO)VALUES
('LAPIS', 2.50, 100, 0),
('CANETA', 3.00, 200, 0),
('CADERNO', 15.00, 150, 0),
('MOCHILA', 120.00, 50, 0),
('CALCULADORA', 80.00, 30, 0);

CREATE TABLE PAGAMENTOS( 
ID_PAGAMENTO SERIAL PRIMARY KEY, 
ID_PEDIDOS INT NOT NULL, 
VALOR REAL NOT NULL WHERE (VALOR IN (VALOR > 0 && VALOR == 0)), 
DATA_PAGAMENTO DATE DEFAULT CURRENT_TIMESTAMP, 
FORMA VARCHAR (10) CHECK (FORMA IN ('PIX', 'CARTÃO', 'BOLETO')) NOT NULL,
CONSTRAINT FK_PEDIDO FOREIGN KEY ID_PEDIDO REFERENCES PEDIDOS (ID_PEDIDO)
);
INSERT INTO PAGAMENTOS (ID_PEDIDOS, VALOR, DATA_PAGAMENTO, FORMA)VALUES(1, 200.00, '2025-08-20', 'PIX'), 
(2, 300.00, '2025-09-31', 'CARTÃO');

CREATE TABLE PEDIDOS ( 
ID_PEDIDO SERIAL PRIMARY KEY, 
ID_CLIENTE INT NOT NULL, 
DATA_PEDIDO DATE NOT NULL DEFAULT CURRENT_TIMESTAMP, 
STATUS_PEDIDOS INT NOT NULL CHECK (STATUS_PEDIDOS IN ('ABERTO', 'FECHADO', 'CANCELADO')) DEFAULT 'ABERTO', 
TOTAL REAL NOT NULL DEFAULT 0,
CONSTRAINT FK_CLIENTE FOREIGN KEY ID_CLIENTE REFERENCES CLIENTES (ID_CLIENTE)
); 

INSERT INTO PEDIDOS (ID_CLIENTE,DATA_PEDIDO, STATUS_PEDIDOS, TOTAL)VALUES( 1,'2085-08-20', 'ABERTO', 200.00), 
(5,'2025-09-31', 'FECHADO', 300.00); 




CREATE TABLE CLIENTES( 
ID_CLIENTE SERIAL PRIMARY KEY, 
NOME VARCHAR (100) NOT NULL, 
EMAIL TEXT NOT NULL, 
STATUS_CLIENTE INT NOT NULL CHECK (STATUS_CLIENTE IN ('STANDARD', 'GOLD', 'PLATINUM') DEFAULT 'STANDARD', 
DATA_CADASTRO DATE NOT NULL DEFAULT CURRENT_DATE, 
SALDO_CREDITO REAL NOT NULL DEFAULT 'ZERO'
);

INSERT INTO CLIENTES(NOME, EMAIL, STATUS_CLIENTE, SALDO_CREDITO) VALUES
('JHEFFERSON','JHEFFESONMATHEUS2017@GMAIL.COM','STANDARD',100.40),
('MARIA','MARIA@EXEMPLO.COM','GOLD',200.50),
('JOAO','JOAO@EXEMPLO.COM','PLATINUM',300.60),
('ANA','ANA@EXEMPLO.COM','STANDARD',150.00),
('PEDRO','PEDRO@EXEMPLO.COM','GOLD',250.00);


CREATE OR REPLACE FUNCTION INSERIR_CLIENTE(NOME VARCHAR, EMAIL VARCHAR, STATUS_CLIENTE VARCHAR, SALDO_CREDITO REAL)
RETURNS VOID AS $$
BEGIN
IF CASES WHEN STATUS_CLIENTE IN ('STANDARD') THEN
    INSERT INTO CLIENTES (NOME, EMAIL, STATUS_CLIENTE, SALDO_CREDITO)
    VALUES (NOME, EMAIL, STATUS_CLIENTE, SALDO_CREDITO);

END IF;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLASE FUNCTION ATIVAR_PRODUTO(ID_PRODUTO INT, P_ATIVO BOOLEAN)
RETURNS VOID AS $$
BEGIN
IF P_ATIVO THEN
    UPDATE PRODUTOS
    SET ATICO = 1
    WHERE ID_PRODUTO = ID_PRODUTO;
ELSE
  RAISE EXCEPTION 'PRODUTO INATIVO';
END IF;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION REPORTE_ESTOQUE(ID_PRODUTO INT, QTD INT)
RETURNS VOID AS $$
BEGIN
IF QTD > 0 THEN
RETURNS ESTOQUE; 
ELSE
  RAISE EXCEPTION 'QUANTIDADE INVÁLIDA';
END IF;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION AJUSTE_PRECO(ID_PRODUTO INT , PERSENTUAL REAL)
RETURNS VOID AS $$
BEGIN
IF PERSENTUAL > 0 THEN
    UPDATE PRODUTOS
    SET PRECO = PRECO + (PRECO * PERSENTUAL / 100)
    WHERE ID_PRODUTO = ID_PRODUTO;
ELSE
  RAISE EXCEPTION 'PERCENTUAL INVÁLIDO';
END IF;
END;
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION MUDAR_STATUS_CLIENTE(ID_CLIENTE INT, NOVO_STATUS VARCHAR)
RETURNS VOID AS $$
BEGIN
IF NOVO_STATUS IN ('STANDARD', 'GOLD', 'PLATINUM') THEN
    UPDATE CLIENTES
    SET STATUS_CLIENTE = NOVO_STATUS
    WHERE ID_CLIENTE = ID_CLIENTE;
ELSE
  RAISE EXCEPTION 'STATUS INVÁLIDO';
END IF;
END;
$$
LANGUAGE plpgsql;